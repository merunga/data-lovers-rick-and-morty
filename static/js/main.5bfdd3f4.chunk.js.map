{"version":3,"sources":["components/Logo/styles.module.css","components/Logo/index.js","components/Header/index.js","components/Filter/index.js","components/CharacterCard/index.js","components/Content/index.js","App.js","serviceWorker.js","index.js"],"names":["module","exports","Logo","src","className","styles","logo","alt","Header","Row","Col","md","Filter","CharacterCard","character","xs","sm","lg","Card","Img","variant","image","Body","Title","name","Text","status","gender","Content","cards","data","results","map","key","id","Container","fluid","App","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"kIACAA,EAAOC,QAAU,CAAC,KAAO,uB,4wgBCUVC,EARF,kBACX,yBACEC,IAAI,yEACJC,UAAWC,IAAOC,KAClBC,IAAI,UCOOC,EARA,kBACb,kBAACC,EAAA,EAAD,CAAKL,UAAU,6BACb,kBAACM,EAAA,EAAD,CAAKC,GAAI,EAAGP,UAAU,eACpB,kBAAC,EAAD,SCHSQ,EAJA,kBACb,M,eCcaC,EAbO,SAAC,GAAD,IAAGC,EAAH,EAAGA,UAAH,OACpB,kBAACJ,EAAA,EAAD,CAAKK,GAAI,GAAIC,GAAI,EAAGL,GAAI,EAAGM,GAAI,GAC7B,kBAACC,EAAA,EAAD,KACE,kBAACA,EAAA,EAAKC,IAAN,CAAUC,QAAQ,MAAMjB,IAAKW,EAAUO,QACvC,kBAACH,EAAA,EAAKI,KAAN,KACE,kBAACJ,EAAA,EAAKK,MAAN,KAAaT,EAAUU,MACvB,kBAACN,EAAA,EAAKO,KAAN,KAAYX,EAAUY,QACtB,kBAACR,EAAA,EAAKO,KAAN,KAAYX,EAAUa,YCYfC,EAhBC,WACd,IAAMC,EAAQC,EAAKC,QAAQC,KAAI,SAAClB,GAC9B,OACE,kBAAC,EAAD,CAAemB,IAAKnB,EAAUoB,GAAIpB,UAAWA,OAIjD,OACE,kBAACqB,EAAA,EAAD,CAAWC,OAAK,GACd,kBAAC3B,EAAA,EAAD,KACGoB,K,MCEMQ,MAVf,WACE,OACE,kBAACF,EAAA,EAAD,KACE,kBAAC,EAAD,MACA,kBAAC,EAAD,MACA,kBAAC,EAAD,QCFcG,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDyHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,c","file":"static/js/main.5bfdd3f4.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"logo\":\"styles_logo__gNOh1\"};","import React from 'react';\nimport styles from './styles.module.css';\n\nconst Logo = () => (\n  <img\n    src=\"https://upload.wikimedia.org/wikipedia/en/c/c8/Rick_and_Morty_logo.png\"\n    className={styles.logo}\n    alt=\"logo\"\n  />\n);\n\nexport default Logo;\n","import React from 'react';\nimport Row from 'react-bootstrap/Row';\nimport Col from 'react-bootstrap/Col';\n\nimport Logo from '../Logo';\n\nconst Header = () => (\n  <Row className=\"justify-content-md-center\">\n    <Col md={4} className=\"text-center\">\n      <Logo />\n    </Col>\n  </Row>\n);\n\nexport default Header;","// import React from 'react';\n\nconst Filter = () => (\n  null\n);\n\nexport default Filter;","import React from 'react';\nimport Col from 'react-bootstrap/Col';\nimport Card from 'react-bootstrap/Card';\n\nconst CharacterCard = ({ character }) => (\n  <Col xs={12} sm={6} md={4} lg={3}>\n    <Card>\n      <Card.Img variant=\"top\" src={character.image} />\n      <Card.Body>\n        <Card.Title>{character.name}</Card.Title>\n        <Card.Text>{character.status}</Card.Text>\n        <Card.Text>{character.gender}</Card.Text>\n      </Card.Body>\n    </Card>\n  </Col>\n);\n\nexport default CharacterCard;","import React from 'react';\nimport Container from 'react-bootstrap/Container';\nimport Row from 'react-bootstrap/Row';\n\nimport data from '../../lib/data.json';\nimport CharacterCard from '../CharacterCard';\n\nconst Content = () => {\n  const cards = data.results.map((character) => {\n    return (\n      <CharacterCard key={character.id} character={character} />\n    )\n  });\n  \n  return (\n    <Container fluid>\n      <Row>\n        {cards}\n      </Row>\n    </Container>\n  )}\n;\n\nexport default Content;","import React from 'react';\nimport Container from 'react-bootstrap/Container';\n\nimport Header from './components/Header';\nimport Filter from './components/Filter';\nimport Content from './components/Content';\n\nimport 'bootstrap/dist/css/bootstrap.min.css';\n\nfunction App() {\n  return (\n    <Container>\n      <Header />\n      <Filter />\n      <Content />\n    </Container>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}